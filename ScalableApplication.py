#!/usr/bin/python
"""
Author: Patrick_Gray
Purpose: Leverage Arp to identify clients on a network
Version 1.0
"""


import subprocess

try:
    import netifaces
except ImportError:
    subprocess.call("pip install netifaces")
try:
    import scapy.all as scapy
except ImportError:
    subprocess.call("pip install scapy")
try:
    import argparse
except ImportError:
    subprocess.call("pip install argparse")

    
def scan(ip):
    global client_list, client_dict
    arp_request = scapy.ARP(pdst=ip)
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast / arp_request
    print("\r""Waiting for response : \n", end='')
    answered_list = scapy.srp(arp_request_broadcast, timeout=3, verbose=False)[0]
    client_list = []
    for element in answered_list:
        client_dict = {"ip": element[1].psrc, "mac": element[1].hwsrc}
        client_list.append(client_dict)
    return client_list


def print_results(results_list):
    print("IP\t\t\tMAC Address\n--------------------------------------------------")
    for client in results_list:
        print("\r", client,"\n", end='')

gws = netifaces.gateways()
var = gws['default'][netifaces.AF_INET]
default_gateway = var[0]

scan_result = scan(ip=default_gateway.__str__() + "/24")

for c in range(0, len(client_list)):
    # arp spoof and file intercept instead of print
    print(client_list[c]["ip"])
print("There are " + len(client_list).__str__() + " clients on the network")
